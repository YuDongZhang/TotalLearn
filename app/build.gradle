apply plugin: 'com.android.application'

def supportVersion = "26.+"
// 版本界限：As-3.0.1 + gradle4.4-all （需要配置r17的NDK环境）
// 或者：As-3.2.1 + gradle4.6-all （正常使用，无警告）
buildscript { // 编译时用Aspect专门的编译器，不再使用传统的javac
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.aspectj:aspectjtools:1.8.9'
        classpath 'org.aspectj:aspectjweaver:1.8.9'
    }
}
android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.example.totallearn"
        minSdkVersion 24
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        ndk {
            moduleName "ndkdemotest-jni"
            abiFilters "armeabi-v7a", "x86", 'arm64-v8a'//极光也要求添加这些东西
        }

        manifestPlaceholders = [
                JPUSH_PKGNAME: "com.example.totallearn",
                JPUSH_APPKEY : "734f68d11623e72c47661479", //JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    buildTypes {
        release {
            minifyEnabled true //启动代码混淆的开关
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        sourceSets.main {
            jni.srcDirs = []
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }

    dataBinding {//这个是为 mvvm 来进行准备的
        enabled = true
    }


}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.3.0-alpha02'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'

//    implementation project(':library')

    //butterknife
    implementation 'com.jakewharton:butterknife:10.0.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0'

    //retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    api 'com.squareup.retrofit2:converter-gson:2.0.2'//gosn数据解析
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.2.0'//rxjava支持
    //rxjava2
    implementation 'io.reactivex.rxjava2:rxjava:2.1.16'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    //日志的请求
    implementation 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    //okhttp
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    //Glide
    implementation 'com.github.bumptech.glide:glide:4.5.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.5.0'
    //pdfview
    implementation 'com.github.barteksc:android-pdf-viewer:3.1.0-beta.1'

    //工具类 超级
//    implementation 'com.blankj:utilcode:1.23.7'
    implementation 'com.blankj:utilcodex:1.30.5'

    //权限请求
    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'

    //dagger2
    implementation 'com.google.dagger:dagger:2.19'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.13'

    //okgo
    implementation 'com.lzy.net:okgo:3.0.4'

    //鲁班
    implementation 'top.zibin:Luban:1.1.8'

    //环形弧度条

    //极光推送需要的东西
    implementation 'cn.jiguang.sdk:jpush:3.6.0'  // 此处以JPush 3.6.0 版本为例。
    implementation 'cn.jiguang.sdk:jcore:2.3.4'  // 此处以JCore 2.3.4 版本为例。

    implementation 'org.conscrypt:conscrypt-android:2.2.1'

    // 下面各SDK根据宿主App是否使用相关业务按需引入。
    // OAID目前为目前国内市场主流的Android Q设备标识，可根据需要选择。
    // 友盟统计SDK
    implementation 'com.umeng.umsdk:common:9.1.0' // (必选)版本号
    implementation 'com.umeng.umsdk:asms:1.2.2' // asms包依赖(必选)
//    implementation 'com.umeng.umsdk:crash:1.0.0' // native crash包依赖(必选)
//
    implementation 'com.haibin:calendarview:3.6.8'
//    implementation 'com.youth.banner:banner:2.0.0'

    // 图表框架
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'

    //picasso
    implementation 'com.squareup.picasso:picasso:2.5.2'

    //banner 轮播图
    implementation 'com.youth.banner:banner:1.4.9'
//    marqueeview 跑马灯
    implementation 'com.sunfusheng:marqueeview:1.3.1'
    //阿里 vlayout
    implementation 'com.alibaba.android:vlayout:1.0.3'

    implementation 'org.aspectj:aspectjrt:1.8.13'


}

//老师讲的 , 这里只是做一个支持,不用担心, 直接复制
// 版本界限：As-3.0.1 + gradle4.4-all （需要配置r17的NDK环境）
// 或者：As-3.2.1 + gradle4.6-all （正常使用，无警告）
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}
